Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/home/nits-58/Desktop/project/anup/loopback/worker-app/node_modules/react-navigation/src/views/Header/Header.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _PlatformHelpers = require('../../PlatformHelpers');

var _reactNativeSafeAreaView = require('react-native-safe-area-view');

var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

var _HeaderTitle = require('./HeaderTitle');

var _HeaderTitle2 = babelHelpers.interopRequireDefault(_HeaderTitle);

var _HeaderBackButton = require('./HeaderBackButton');

var _HeaderBackButton2 = babelHelpers.interopRequireDefault(_HeaderBackButton);

var _ModularHeaderBackButton = require('./ModularHeaderBackButton');

var _ModularHeaderBackButton2 = babelHelpers.interopRequireDefault(_ModularHeaderBackButton);

var _HeaderStyleInterpolator = require('./HeaderStyleInterpolator');

var _HeaderStyleInterpolator2 = babelHelpers.interopRequireDefault(_HeaderStyleInterpolator);

var _withOrientation = require('../withOrientation');

var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
var STATUSBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 20 : 0;
var TITLE_OFFSET = _reactNative.Platform.OS === 'ios' ? 70 : 56;

var getAppBarHeight = function getAppBarHeight(isLandscape) {
  return _reactNative.Platform.OS === 'ios' ? isLandscape && !_reactNative.Platform.isPad ? 32 : 44 : 56;
};

var Header = function (_React$PureComponent) {
  babelHelpers.inherits(Header, _React$PureComponent);

  function Header() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, Header);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      widths: {}
    }, _this._navigateBack = function () {
      requestAnimationFrame(function () {
        _this.props.navigation.goBack(_this.props.scene.route.key);
      });
    }, _this._renderTitleComponent = function (props) {
      var details = _this.props.getScreenDetails(props.scene);
      var headerTitle = details.options.headerTitle;
      if (_react2.default.isValidElement(headerTitle)) {
        return headerTitle;
      }
      var titleString = _this._getHeaderTitleString(props.scene);

      var titleStyle = details.options.headerTitleStyle;
      var color = details.options.headerTintColor;
      var allowFontScaling = details.options.headerTitleAllowFontScaling;

      var onLayoutIOS = _reactNative.Platform.OS === 'ios' ? function (e) {
        _this.setState({
          widths: babelHelpers.extends({}, _this.state.widths, babelHelpers.defineProperty({}, props.scene.key, e.nativeEvent.layout.width))
        });
      } : undefined;

      var RenderedHeaderTitle = headerTitle && typeof headerTitle !== 'string' ? headerTitle : _HeaderTitle2.default;
      return _react2.default.createElement(
        RenderedHeaderTitle,
        {
          onLayout: onLayoutIOS,
          allowFontScaling: allowFontScaling == null ? true : allowFontScaling,
          style: [color ? { color: color } : null, titleStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 119
          }
        },
        titleString
      );
    }, _this._renderLeftComponent = function (props) {
      var _this$props$getScreen = _this.props.getScreenDetails(props.scene),
          options = _this$props$getScreen.options;

      if (_react2.default.isValidElement(options.headerLeft) || options.headerLeft === null) {
        return options.headerLeft;
      }

      if (props.scene.index === 0) {
        return;
      }

      var backButtonTitle = _this._getBackButtonTitleString(props.scene);
      var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);
      var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
      var RenderedLeftComponent = options.headerLeft || _HeaderBackButton2.default;
      return _react2.default.createElement(RenderedLeftComponent, {
        onPress: _this._navigateBack,
        pressColorAndroid: options.headerPressColorAndroid,
        tintColor: options.headerTintColor,
        buttonImage: options.headerBackImage,
        title: backButtonTitle,
        truncatedTitle: truncatedBackButtonTitle,
        titleStyle: options.headerBackTitleStyle,
        width: width,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 152
        }
      });
    }, _this._renderModularLeftComponent = function (props, ButtonContainerComponent, LabelContainerComponent) {
      var _this$props$getScreen2 = _this.props.getScreenDetails(props.scene),
          options = _this$props$getScreen2.options;

      var backButtonTitle = _this._getBackButtonTitleString(props.scene);
      var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);
      var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;

      return _react2.default.createElement(_ModularHeaderBackButton2.default, {
        onPress: _this._navigateBack,
        ButtonContainerComponent: ButtonContainerComponent,
        LabelContainerComponent: LabelContainerComponent,
        pressColorAndroid: options.headerPressColorAndroid,
        tintColor: options.headerTintColor,
        buttonImage: options.headerBackImage,
        title: backButtonTitle,
        truncatedTitle: truncatedBackButtonTitle,
        titleStyle: options.headerBackTitleStyle,
        width: width,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 180
        }
      });
    }, _this._renderRightComponent = function (props) {
      var details = _this.props.getScreenDetails(props.scene);
      var headerRight = details.options.headerRight;

      return headerRight || null;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(Header, [{
    key: '_getHeaderTitleString',
    value: function _getHeaderTitleString(scene) {
      var sceneOptions = this.props.getScreenDetails(scene).options;
      if (typeof sceneOptions.headerTitle === 'string') {
        return sceneOptions.headerTitle;
      }
      return sceneOptions.title;
    }
  }, {
    key: '_getLastScene',
    value: function _getLastScene(scene) {
      return this.props.scenes.find(function (s) {
        return s.index === scene.index - 1;
      });
    }
  }, {
    key: '_getBackButtonTitleString',
    value: function _getBackButtonTitleString(scene) {
      var lastScene = this._getLastScene(scene);
      if (!lastScene) {
        return null;
      }
      var headerBackTitle = this.props.getScreenDetails(lastScene).options.headerBackTitle;

      if (headerBackTitle || headerBackTitle === null) {
        return headerBackTitle;
      }
      return this._getHeaderTitleString(lastScene);
    }
  }, {
    key: '_getTruncatedBackButtonTitle',
    value: function _getTruncatedBackButtonTitle(scene) {
      var lastScene = this._getLastScene(scene);
      if (!lastScene) {
        return null;
      }
      return this.props.getScreenDetails(lastScene).options.headerTruncatedBackTitle;
    }
  }, {
    key: '_renderLeft',
    value: function _renderLeft(props) {
      var _props$getScreenDetai = this.props.getScreenDetails(props.scene),
          options = _props$getScreenDetai.options;

      var transitionPreset = this.props.transitionPreset;

      if (transitionPreset !== 'uikit' || options.headerBackImage || options.headerLeft || options.headerLeft === null) {
        return this._renderSubView(props, 'left', this._renderLeftComponent, this.props.leftInterpolator);
      } else {
        return this._renderModularSubView(props, 'left', this._renderModularLeftComponent, this.props.leftLabelInterpolator, this.props.leftButtonInterpolator);
      }
    }
  }, {
    key: '_renderTitle',
    value: function _renderTitle(props, options) {
      var style = {};
      var transitionPreset = this.props.transitionPreset;


      if (_reactNative.Platform.OS === 'android') {
        if (!options.hasLeftComponent) {
          style.left = 0;
        }
        if (!options.hasRightComponent) {
          style.right = 0;
        }
      } else if (_reactNative.Platform.OS === 'ios' && !options.hasLeftComponent && !options.hasRightComponent) {
        style.left = 0;
        style.right = 0;
      }

      return this._renderSubView(babelHelpers.extends({}, props, { style: style }), 'title', this._renderTitleComponent, transitionPreset === 'uikit' ? this.props.titleFromLeftInterpolator : this.props.titleInterpolator);
    }
  }, {
    key: '_renderRight',
    value: function _renderRight(props) {
      return this._renderSubView(props, 'right', this._renderRightComponent, this.props.rightInterpolator);
    }
  }, {
    key: '_renderModularSubView',
    value: function _renderModularSubView(props, name, renderer, labelStyleInterpolator, buttonStyleInterpolator) {
      var _this2 = this;

      var scene = props.scene;
      var index = scene.index,
          isStale = scene.isStale,
          key = scene.key;

      if (index === 0) {
        return;
      }

      var offset = this.props.navigation.state.index - index;

      if (Math.abs(offset) > 2) {
        return null;
      }

      var ButtonContainer = function ButtonContainer(_ref2) {
        var children = _ref2.children;
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [buttonStyleInterpolator(babelHelpers.extends({}, _this2.props, props))],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 294
            }
          },
          children
        );
      };

      var LabelContainer = function LabelContainer(_ref3) {
        var children = _ref3.children;
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [labelStyleInterpolator(babelHelpers.extends({}, _this2.props, props))],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 302
            }
          },
          children
        );
      };

      var subView = renderer(props, ButtonContainer, LabelContainer);

      if (subView === null) {
        return subView;
      }

      var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';

      return _react2.default.createElement(
        _reactNative.View,
        {
          key: name + '_' + key,
          pointerEvents: pointerEvents,
          style: [styles.item, styles[name], props.style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 318
          }
        },
        subView
      );
    }
  }, {
    key: '_renderSubView',
    value: function _renderSubView(props, name, renderer, styleInterpolator) {
      var scene = props.scene;
      var index = scene.index,
          isStale = scene.isStale,
          key = scene.key;


      var offset = this.props.navigation.state.index - index;

      if (Math.abs(offset) > 2) {
        return null;
      }

      var subView = renderer(props);

      if (subView == null) {
        return null;
      }

      var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';

      return _react2.default.createElement(
        _reactNative.Animated.View,
        {
          pointerEvents: pointerEvents,
          key: name + '_' + key,
          style: [styles.item, styles[name], props.style, styleInterpolator(babelHelpers.extends({}, this.props, props))],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 349
          }
        },
        subView
      );
    }
  }, {
    key: '_renderHeader',
    value: function _renderHeader(props) {
      var left = this._renderLeft(props);
      var right = this._renderRight(props);
      var title = this._renderTitle(props, {
        hasLeftComponent: !!left,
        hasRightComponent: !!right
      });

      var wrapperProps = {
        style: [_reactNative.StyleSheet.absoluteFill, styles.header],
        key: 'scene_' + props.scene.key
      };

      var _props = this.props,
          isLandscape = _props.isLandscape,
          transitionPreset = _props.transitionPreset;

      var _props$getScreenDetai2 = this.props.getScreenDetails(props.scene),
          options = _props$getScreenDetai2.options;

      if (options.headerLeft || options.headerBackImage || _reactNative.Platform.OS !== 'ios' || transitionPreset !== 'uikit') {
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, wrapperProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 391
            }
          }),
          title,
          left,
          right
        );
      } else {
        return _react2.default.createElement(
          _PlatformHelpers.MaskedViewIOS,
          babelHelpers.extends({}, wrapperProps, {
            maskElement: _react2.default.createElement(
              _reactNative.View,
              { style: styles.iconMaskContainer, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 402
                }
              },
              _react2.default.createElement(_reactNative.Image, {
                source: require('../assets/back-icon-mask.png'),
                style: styles.iconMask,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 403
                }
              }),
              _react2.default.createElement(_reactNative.View, { style: styles.iconMaskFillerRect, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 407
                }
              })
            ),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 399
            }
          }),
          title,
          left,
          right
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var appBar = void 0;

      if (this.props.mode === 'float') {
        var scenesByIndex = {};
        this.props.scenes.forEach(function (scene) {
          scenesByIndex[scene.index] = scene;
        });
        var scenesProps = Object.values(scenesByIndex).map(function (scene) {
          return {
            position: _this3.props.position,
            progress: _this3.props.progress,
            scene: scene
          };
        });
        appBar = scenesProps.map(this._renderHeader, this);
      } else {
        appBar = this._renderHeader({
          position: new _reactNative.Animated.Value(this.props.scene.index),
          progress: new _reactNative.Animated.Value(0),
          scene: this.props.scene
        });
      }

      var _props2 = this.props,
          scenes = _props2.scenes,
          scene = _props2.scene,
          position = _props2.position,
          screenProps = _props2.screenProps,
          progress = _props2.progress,
          isLandscape = _props2.isLandscape,
          rest = babelHelpers.objectWithoutProperties(_props2, ['scenes', 'scene', 'position', 'screenProps', 'progress', 'isLandscape']);

      var _props$getScreenDetai3 = this.props.getScreenDetails(scene),
          options = _props$getScreenDetai3.options;

      var headerStyle = options.headerStyle;

      var appBarHeight = getAppBarHeight(isLandscape);
      var containerStyles = [styles.container, {
        height: appBarHeight
      }, headerStyle];

      return _react2.default.createElement(
        _reactNative.Animated.View,
        babelHelpers.extends({}, rest, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 464
          }
        }),
        _react2.default.createElement(
          _reactNativeSafeAreaView2.default,
          {
            style: containerStyles,
            forceInset: { top: 'always', bottom: 'never' },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 465
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.appBar, __source: {
                fileName: _jsxFileName,
                lineNumber: 469
              }
            },
            appBar
          )
        )
      );
    }
  }], [{
    key: 'HEIGHT',
    get: function get() {
      return APPBAR_HEIGHT + STATUSBAR_HEIGHT;
    }
  }]);
  return Header;
}(_react2.default.PureComponent);

Header.defaultProps = {
  leftInterpolator: _HeaderStyleInterpolator2.default.forLeft,
  leftButtonInterpolator: _HeaderStyleInterpolator2.default.forLeftButton,
  leftLabelInterpolator: _HeaderStyleInterpolator2.default.forLeftLabel,
  titleFromLeftInterpolator: _HeaderStyleInterpolator2.default.forCenterFromLeft,
  titleInterpolator: _HeaderStyleInterpolator2.default.forCenter,
  rightInterpolator: _HeaderStyleInterpolator2.default.forRight
};


var platformContainerStyles = void 0;
if (_reactNative.Platform.OS === 'ios') {
  platformContainerStyles = {
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderBottomColor: 'rgba(0, 0, 0, .3)'
  };
} else {
  platformContainerStyles = {
    shadowColor: 'black',
    shadowOpacity: 0.1,
    shadowRadius: _reactNative.StyleSheet.hairlineWidth,
    shadowOffset: {
      height: _reactNative.StyleSheet.hairlineWidth
    },
    elevation: 4
  };
}

var styles = _reactNative.StyleSheet.create({
  container: babelHelpers.extends({
    backgroundColor: _reactNative.Platform.OS === 'ios' ? '#F7F7F7' : '#FFF'
  }, platformContainerStyles),
  appBar: {
    flex: 1
  },
  header: {
    flexDirection: 'row'
  },
  item: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent'
  },
  iconMaskContainer: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center'
  },
  iconMaskFillerRect: {
    flex: 1,
    backgroundColor: '#d8d8d8',
    marginLeft: -3
  },
  iconMask: {
    height: 21,
    width: 12,
    marginLeft: 9,
    marginTop: -0.5,
    alignSelf: 'center',
    resizeMode: 'contain'
  },
  title: {
    bottom: 0,
    left: TITLE_OFFSET,
    right: TITLE_OFFSET,
    top: 0,
    position: 'absolute',
    alignItems: _reactNative.Platform.OS === 'ios' ? 'center' : 'flex-start'
  },
  left: {
    left: 0,
    bottom: 0,
    top: 0,
    position: 'absolute'
  },
  right: {
    right: 0,
    bottom: 0,
    top: 0,
    position: 'absolute'
  }
});

exports.default = (0, _withOrientation2.default)(Header);