Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/home/nits-58/Desktop/project/anup/loopback/worker-app/node_modules/react-navigation/src/views/ResourceSavingSceneView.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _SceneView = require('./SceneView');

var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

var FAR_FAR_AWAY = 3000;
var ResourceSavingSceneView = function (_React$PureComponent) {
  babelHelpers.inherits(ResourceSavingSceneView, _React$PureComponent);

  function ResourceSavingSceneView(props) {
    babelHelpers.classCallCheck(this, ResourceSavingSceneView);

    var _this = babelHelpers.possibleConstructorReturn(this, (ResourceSavingSceneView.__proto__ || Object.getPrototypeOf(ResourceSavingSceneView)).call(this));

    _initialiseProps.call(_this);

    var key = props.childNavigation.state.key;
    var focusedIndex = props.navigation.state.index;
    var focusedKey = props.navigation.state.routes[focusedIndex].key;
    var isFocused = key === focusedKey;

    _this.state = {
      awake: props.lazy ? isFocused : true,
      visible: isFocused
    };
    return _this;
  }

  babelHelpers.createClass(ResourceSavingSceneView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._actionListener = this.props.navigation.addListener('action', this._onAction);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._actionListener.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          awake = _state.awake,
          visible = _state.visible;
      var _props = this.props,
          childNavigation = _props.childNavigation,
          navigation = _props.navigation,
          removeClippedSubviews = _props.removeClippedSubviews,
          lazy = _props.lazy,
          rest = babelHelpers.objectWithoutProperties(_props, ['childNavigation', 'navigation', 'removeClippedSubviews', 'lazy']);


      return _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.container,
          collapsable: false,
          removeClippedSubviews: _reactNative.Platform.OS === 'android' ? removeClippedSubviews : !visible && removeClippedSubviews,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 46
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: this._mustAlwaysBeVisible() || visible ? styles.innerAttached : styles.innerDetached,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          awake ? _react2.default.createElement(_SceneView2.default, babelHelpers.extends({}, rest, { navigation: childNavigation, __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          })) : null
        )
      );
    }
  }]);
  return ResourceSavingSceneView;
}(_react2.default.PureComponent);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this._mustAlwaysBeVisible = function () {
    return _this2.props.animationEnabled || _this2.props.swipeEnabled;
  };

  this._onAction = function (payload) {
    if (payload.action.type == 'Navigation/COMPLETE_TRANSITION' || !payload.state) {
      return;
    }

    var _payload$state = payload.state,
        routes = _payload$state.routes,
        index = _payload$state.index;

    var key = _this2.props.childNavigation.state.key;

    if (routes[index].key === key) {
      if (!_this2.state.visible) {
        var nextState = { visible: true };
        if (!_this2.state.awake) {
          nextState.awake = true;
        }
        _this2.setState(nextState);
      }
    } else {
      if (_this2.state.visible) {
        _this2.setState({ visible: false });
      }
    }
  };
};

exports.default = ResourceSavingSceneView;


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  innerAttached: {
    flex: 1
  },
  innerDetached: {
    flex: 1,
    top: FAR_FAR_AWAY
  }
});